"New Providence" will be a server for hosting peer-to-peer shared videos and music between people in my friend group. The general idea is a server hosted at one of our houses, running a custom program for accessing the files and downloading them to each user's personal computer. The program will be originally available only on Windows, but eventually on Linux and MacOS as well. Each user must have a username and password, and when logging in, their IP will be checked against previous IPs for location data to make sure we know all people accessing the server and that the usernames aren't shared. Anyone attempting to let someone else in can request them a username and password, so long as the person comes recommended by a primary user.

The file transfers will use my custom groundfish256 encryption to prevent any knowledge of what is being transferred from leaking to an ISP. The groundfish256 "word" list will be updated weekly by the server, and anyone logging in with an old list will automatically update to the new list (which will be encrypted using their current list format to prevent the lists being leaked). Users will not have to know how groundfish256 works to use the program. They can just log in, see a list of what is available, and iterate through the folders to find what they want.

The program will check for a list of what they already have in the program folder, and mark it as downloaded. If there is an update to any existing files, the user will be notified and ask if they want to update that file (for example, if a higher kbps MP3 is found and replaced on the server, it might ask them if they want the update. The message will include the update log so they know what's being updated and why. Any files they don't have will be able to be selected and queued up, and the downloads will happen in the background as they continue looking through the server. There will be a progress bar along the bottom of the screen showing per-file progress, as well as a counter for how many files are remaining to be downloaded, and how many megabytes are remaining in that collection to be synced.

The general idea is that any of our friends can share music and movies amongst each other, without having to worry about alerting ISPs. Only one person will need to torrent a program, and everyone else can get it through New Providence once they sync it to the server. Anything uploaded will be able to be tagged, and people can put in tags they get notifications for when they log in. For example, I could add a tag notification for "Westworld" and if someone uploads Westworld and tags it, the program will inform me of this when I next log in. In addition, people can put up requests on a temporary message board and others can view the message board for requests and attempt to fulfill them.

-----

Development Steps:

1) Develop groundfish256 into a basic server and client program. The client has the "version 1" list, and the server has "version 2" so it updates automatically. The server can send using any list, so it sends version 2 in the format of version 1 so that the client can understand and update. Once the server confirms the client has the version 2 list, it sends all data using the version 2 list. The client selects a random number between 0 and 255 and sends that number by encrypting it with the first "word" in the list. That number represents where all subsequent encrypted messages from the server should start. Once the client is synced up and has a starting "word" selected in this way, it receives a large confirmation string that should include every number between 0 and 255, encrypted fully using groundfish256, and in random order, packed into smaller messages with a random number of numbers in each. On the client-side, this can be visualized using a 256-partition circle that gets colored in as the messages arrive. Once everything is locked in, the client is fully connected. Each subsequent message using the groundfish256 system starts with an encrypted byte which switches the word index that the message starts with, using the "primary word index" which was agreed upon at the beginning of the connection. In this way, every message will be nearly impossible to decrypt without the word list, which no traffic observer (ISP) should be able to discern.